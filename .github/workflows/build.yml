name: Build and Upload Artifacts

on:
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code from all repositories
      - name: Checkout Core Application
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-core
          path: repo1

      - name: Checkout Utility Library
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-utils
          path: repo2

      - name: Checkout API Service
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-api
          path: repo3

      # Step 2: Install Docker for Trivy
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y containerd
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      # Step 3: Scan source code for vulnerabilities using Trivy (via Docker)
      - name: Scan Core Application Source Code
        run: |
          docker run --rm -v $(pwd)/repo1:/project aquasec/trivy fs /project

      - name: Scan Utility Library Source Code
        run: |
          docker run --rm -v $(pwd)/repo2:/project aquasec/trivy fs /project

      - name: Scan API Service Source Code
        run: |
          docker run --rm -v $(pwd)/repo3:/project aquasec/trivy fs /project

      # Step 4: Build the code
      - name: Build Core Application
        run: |
          cd repo1
          mvn clean package

      - name: Build Utility Library
        run: |
          cd repo2
          mvn clean package

      - name: Build API Service
        run: |
          cd repo3
          mvn clean package

      # Step 5: Scan built artifacts for vulnerabilities using Trivy
      - name: Scan Core Application Artifact
        run: |
          docker run --rm -v $(pwd)/repo1/target:/project aquasec/trivy fs /project

      - name: Scan Utility Library Artifact
        run: |
          docker run --rm -v $(pwd)/repo2/target:/project aquasec/trivy fs /project

      - name: Scan API Service Artifact
        run: |
          docker run --rm -v $(pwd)/repo3/target:/project aquasec/trivy fs /project

      # Step 6: Upload built artifacts to GitHub Packages
      - name: Publish Core Application Artifact
        uses: actions/upload-artifact@v3
        with:
          name: core-application-artifact
          path: repo1/target/*.jar

      - name: Publish Utility Library Artifact
        uses: actions/upload-artifact@v3
        with:
          name: utility-library-artifact
          path: repo2/target/*.jar

      - name: Publish API Service Artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-service-artifact
          path: repo3/target/*.jar
