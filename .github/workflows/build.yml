name: Build, Scan, Upload, and Deploy Artifacts

on:
  workflow_dispatch:

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from all repositories
      - name: Checkout Core Application
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-core
          path: repo1

      - name: Checkout Utility Library
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-utils
          path: repo2

      - name: Checkout API Service
        uses: actions/checkout@v3
        with:
          repository: deep-security-dev/deep-security-api
          path: repo3

      # Step 2: Install Docker for Trivy
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y containerd
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      # Step 3: Scan source code for vulnerabilities and save results
      - name: Scan Core Application Source Code
        run: |
          docker run --rm -v $(pwd)/repo1:/project aquasec/trivy fs /project > core-application-scan.txt

      - name: Scan Utility Library Source Code
        run: |
          docker run --rm -v $(pwd)/repo2:/project aquasec/trivy fs /project > utility-library-scan.txt

      - name: Scan API Service Source Code
        run: |
          docker run --rm -v $(pwd)/repo3:/project aquasec/trivy fs /project > api-service-scan.txt

      # Step 4: Build the code
      - name: Build Core Application
        run: |
          cd repo1
          mvn clean package

      - name: Build Utility Library
        run: |
          cd repo2
          mvn clean package

      - name: Build API Service
        run: |
          cd repo3
          mvn clean package

      # Step 5: Upload built artifacts and scan results
      - name: Publish Core Application Artifact and Scan Result
        uses: actions/upload-artifact@v3
        with:
          name: core-application-artifact
          path: |
            repo1/target/*.jar
            core-application-scan.txt

      - name: Publish Utility Library Artifact and Scan Result
        uses: actions/upload-artifact@v3
        with:
          name: utility-library-artifact
          path: |
            repo2/target/*.jar
            utility-library-scan.txt

      - name: Publish API Service Artifact and Scan Result
        uses: actions/upload-artifact@v3
        with:
          name: api-service-artifact
          path: |
            repo3/target/*.jar
            api-service-scan.txt

      # Step 6: Deploy artifacts and scan results to GitHub Pages
      - name: Prepare Deployment
        run: |
          mkdir -p deployed-artifacts
          mv core-application-artifact/*.jar deployed-artifacts/
          mv utility-library-artifact/*.jar deployed-artifacts/
          mv api-service-artifact/*.jar deployed-artifacts/
          mv core-application-scan.txt deployed-artifacts/
          mv utility-library-scan.txt deployed-artifacts/
          mv api-service-scan.txt deployed-artifacts/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deployed-artifacts
          commit_message: "Deploy JAR files and scan results to GitHub Pages"
